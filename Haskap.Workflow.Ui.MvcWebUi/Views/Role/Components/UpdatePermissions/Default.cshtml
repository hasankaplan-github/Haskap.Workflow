@using Haskap.Workflow.Application.Dtos;
@using Haskap.DddBase.Application.Dtos.Common;
@using Haskap.DddBase.Presentation.CustomAuthorization;
@using Haskap.Workflow.Ui.MvcWebUi.CustomAuthorization;
@using Haskap.DddBase.Domain.Providers;
@using System.Collections.ObjectModel;

@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery


@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@

@model ReadOnlyDictionary<string, List<PermissionRequirement>>

@{
    var isFirstPermissionGroup = true;
    var selectedPermissions = ViewBag.SelectedPermissions as List<PermissionOutputDto>;
    var selected = false;

    var antiforgeryToken = Antiforgery.GetAndStoreTokens(Context).RequestToken;
}


<div class="modal-header bg-primary">
    <h5 class="modal-title" id="staticBackdropLabel"><i class="fa-solid fa-shield-halved"></i> Yetkiler</h5>
    <button type="button" class="btn-close cancelRoleUpdatePermission" @*data-bs-dismiss="modal"*@ aria-label="Close"></button>
</div>

<div class="modal-body">
    <div class="row">
        <div class="d-flex align-items-start">
            <div class="nav flex-column nav-pills me-3" id="v-pills-tab" role="tablist" aria-orientation="vertical">
                @foreach (var groupKey in Model.Keys)
                {
                    <button class="nav-link @Html.Raw(isFirstPermissionGroup ? "active" : string.Empty)" id="v-pills-home-tab" data-bs-toggle="pill" data-bs-target="#v-pills-@groupKey" type="button" role="tab" aria-controls="v-pills-@groupKey" aria-selected="true">@groupKey</button>

                    isFirstPermissionGroup = false;
                }
            </div>
            <div class="tab-content" id="v-pills-tabContent">
                @{
                    isFirstPermissionGroup = true;
                }
                @foreach (var permissions in Model)
                {
                    var groupKey = permissions.Key;

                    <div class="tab-pane fade @Html.Raw(isFirstPermissionGroup ? "show active" : string.Empty)" id="v-pills-@groupKey" role="tabpanel" aria-labelledby="v-pills-@(groupKey)-tab">
                        @foreach (var permission in permissions.Value)
                        {
                            selected = false;
                            if (selectedPermissions.Exists(x=>x.Name == permission.Name))
                            {
                                selected = true;
                            }
                            <div class="custom-control custom-checkbox">
                                <input class="custom-control-input" type="checkbox" @Html.Raw(selected ? "checked=\"checked\"" : string.Empty) id="@permission.Name" value="@permission.Name">
                                <label for="@permission.Name" class="custom-control-label">@(permission.DisplayText ?? permission.Name)</label>
                            </div>
                        }
                    </div>

                    isFirstPermissionGroup = false;
                }
            </div>
        </div>
    </div>
</div>

<div class="modal-footer">
    <button type="button" class="btn btn-secondary cancelRoleUpdatePermission" @*data-bs-dismiss="modal"*@ id="cancelRoleUpdatePermissionButton">İptal</button>
    <button type="button" class="btn btn-primary" @*data-bs-dismiss="modal"*@ id="saveRoleUpdatePermissionButton"><i class="fas fa-save"></i> Kaydet</button>
</div>

<script type="text/javascript">

    $(".cancelRoleUpdatePermission").click(function () {
        hideRoleUpdatePermissionsModal();
    })

    $("#saveRoleUpdatePermissionButton").click(function () {
        let checkedPermissions = $("input:checked").map(function () {
            return this.value;
        }).get();

        let uncheckedPermissions = $("input:checkbox:not(:checked)").map(function () {
            return this.value;
        }).get();


        $.ajax({
            type: 'POST',
            headers: {
                'RequestVerificationToken': '@antiforgeryToken'
            },
            url: '@Url.Action("UpdatePermissions", "Role")',
            data: {
                roleId: '@ViewBag.RoleId',
                checkedPermissions: checkedPermissions,
                uncheckedPermissions: uncheckedPermissions
            }
        }).done(function (data, status, xhr) {
            Swal.fire(
                'Başarılı',
                'Yetkiler başarıyla güncellendi.',
                'success'
            );

            hideRoleUpdatePermissionsModal();
        });
    })

</script>